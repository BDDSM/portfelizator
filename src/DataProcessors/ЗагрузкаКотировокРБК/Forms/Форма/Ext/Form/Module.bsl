
&НаКлиентеНаСервереБезКонтекста
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
// Примечание:
//  В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
//  рекомендуется использовать функцию платформы СтрРазделить.
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура Загрузить(Команда)
	
	ЗагрузитьНаСервере();
	
	ПоказатьОповещениеПользователя("Загрузка котировок завершена!");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	
	Дата1 = Период.ДатаНачала;
	Дата2 = Период.ДатаОкончания;
	
	ТаблицаКотировок = ПолучитьТаблицуКотировок(Дата1, Дата2, Источник, Тикер);
	
	Если ТаблицаКотировок = Неопределено Тогда
		Сообщить("Не удалось прочитать котировки для Тикер = " + Тикер + "!");
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицыКотировок Из ТаблицаКотировок Цикл
		МЗ = РегистрыСведений.Котировки.СоздатьМенеджерЗаписи();
		МЗ.Период		= СтрокаТаблицыКотировок.Дата;
		МЗ.Тикер		= СтрокаТаблицыКотировок.Тикер;
		МЗ.Котировка	= СтрокаТаблицыКотировок.Цена;
		МЗ.Записать();
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуКотировок(ПарамДата1, ПарамДата2, ПарамИсточник = "", ПарамТикер = "")
	
	ТаблицаКотировок = Новый ТаблицаЗначений;
	ТаблицаКотировок.Колонки.Добавить("Тикер");
	ТаблицаКотировок.Колонки.Добавить("Дата");
	ТаблицаКотировок.Колонки.Добавить("Цена");
	
	// http://export.rbc.ru/free/micex.0/free.fcgi?period=DAILY&tickers=NULL&d1=01&m1=08&y1=2017&d2=10&m2=08&y2=2017&lastdays=9&separator=%2C&data_format=EXCEL&header=1

	Сервер = "export.rbc.ru";
	АдресСтраницы = "/free/[ИСТОЧНИК]/free.fcgi?period=DAILY&tickers=[ТИКЕР]&d1=[ДД1]&m1=[ММ1]&y1=[ГГГГ1]&d2=[ДД2]&m2=[ММ2]&y2=[ГГГГ2]&separator=%2C&data_format=EXCEL&header=1";
	
	Замены = Новый Соответствие;
	Замены.Вставить("ИСТОЧНИК"	, ?(ПустаяСтрока(ПарамИсточник), "micex.0", СокрЛП(ПарамИсточник)));
	Замены.Вставить("ТИКЕР"	, ?(ПустаяСтрока(ПарамТикер), "NULL", СокрЛП(ПарамТикер)));
	Замены.Вставить("ДД1"	, Формат(ПарамДата1, "ДФ=dd"));
	Замены.Вставить("ММ1"	, Формат(ПарамДата1, "ДФ=MM"));
	Замены.Вставить("ГГГГ1"	, Формат(ПарамДата1, "ДФ=yyyy"));
	Замены.Вставить("ДД2"	, Формат(ПарамДата2, "ДФ=dd"));
	Замены.Вставить("ММ2"	, Формат(ПарамДата2, "ДФ=MM"));
	Замены.Вставить("ГГГГ2"	, Формат(ПарамДата2, "ДФ=yyyy"));
	
	Для Каждого КлючИЗначение Из Замены Цикл
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "[" + КлючИЗначение.Ключ + "]", КлючИЗначение.Значение);
	КонецЦикла; 
	
	УРЛ = "http://" + Сервер + АдресСтраницы;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPСоединение = Новый HTTPСоединение(Сервер);
	HTTPЗапрос = Новый HTTPЗапрос(АдресСтраницы);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Сообщить("Сервер " + Сервер + " вернул код ошибки " + HTTPОтвет.КодСостояния);
		Возврат Неопределено;
	КонецЕсли; 
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ИмяВременногоФайла);
	
	НомСтр = 0;
	
	НомераКолонок = Новый Структура;
	ПолеТикер = "TICKER";
	ПолеДата = "DATE";
	ПолеЦена = "CLOSE";
	
	Пока Истина Цикл
		
		Стр = ЧтениеТекста.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		
		НомСтр = НомСтр + 1;
		
		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли; 
		
		НачалоСообщенияОбОшибке = "Ошибка формата файла! Строка #" + НомСтр + ": ";
		
		МассивКомпонент = РазложитьСтрокуВМассивПодстрок(Стр, ",");
		
		Если НомСтр = 1 Тогда
			// в первой строке заголовки
			Для Сч = 0 По МассивКомпонент.Количество() - 1 Цикл
				ТекКомпонент = МассивКомпонент[Сч];
				Если ТекКомпонент = ПолеТикер Тогда
					НомераКолонок.Вставить("Тикер", Сч);
				ИначеЕсли ТекКомпонент = ПолеДата Тогда
					НомераКолонок.Вставить("Дата", Сч);
				ИначеЕсли ТекКомпонент = ПолеЦена Тогда
					НомераКолонок.Вставить("Цена", Сч);
				КонецЕсли; 
			КонецЦикла;
			Если НЕ НомераКолонок.Свойство("Тикер") Тогда
				Сообщить(НачалоСообщенияОбОшибке + " В заголовке не найдено поле " + ПолеТикер + "!");
				Возврат Неопределено;
			КонецЕсли; 
			Если НЕ НомераКолонок.Свойство("Дата") Тогда
				Сообщить(НачалоСообщенияОбОшибке + " В заголовке не найдено поле " + ПолеДата + "!");
				Возврат Неопределено;
			КонецЕсли; 
			Если НЕ НомераКолонок.Свойство("Цена") Тогда
				Сообщить(НачалоСообщенияОбОшибке + " В заголовке не найдено поле " + ПолеЦена + "!");
				Возврат Неопределено;
			КонецЕсли; 
		Иначе 
			Если НЕ ЗначениеЗаполнено(МассивКомпонент[НомераКолонок.Цена]) Тогда
				Продолжить;
			КонецЕсли; 
			
			ТекТикер = МассивКомпонент[НомераКолонок.Тикер];
			ТекДата = Дата(СтрЗаменить(МассивКомпонент[НомераКолонок.Дата], "-", ""));
			ТекЦена = Число(МассивКомпонент[НомераКолонок.Цена]);
			
			НоваяСтрока = ТаблицаКотировок.Добавить();
			НоваяСтрока.Тикер = ТекТикер;
			НоваяСтрока.Дата = ТекДата;
			НоваяСтрока.Цена = ТекЦена;
			
			//Сообщить("Дата = " + ТекДата + "; Цена = " + ТекЦена);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЧтениеТекста.Закрыть();
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТаблицаКотировок;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Период.ДатаНачала		= НачалоМесяца(ТекущаяДатаСеанса());
	Период.ДатаОкончания	= КонецМесяца(Период.ДатаНачала);
	
	СЗ = Элементы.Источник.СписокВыбора;
	СЗ.Очистить();
	СЗ.Добавить("index.0", "Мировые фондовые индексы");
	СЗ.Добавить("micex.0", "Московская Биржа T+ Акции");
	СЗ.Добавить("micex.19", "Московская Биржа T+ Облигации");
	
	МассивТикеров = ОбщегоНазначенияСервер.ПолучитьМассивТикеров();
	Элементы.Тикер.СписокВыбора.ЗагрузитьЗначения(МассивТикеров);
	
КонецПроцедуры



